#! /bin/bash

# Takes two files as arguments, discerns which is the more current version,
#+ and makes the contents of the older file match the contents of the more
#+ current file.
# Useful when one file is being edited on multiple systems and one forgets
#+ on which system the most up-to-date version of the file is saved.
# ---------------------------------------------------------------------------
# Do not run this script if time and date are not correctly set.
# If one or both files come from a system with an incorrect time/date setting
#+ data may be lost!

# Always provide the absolute or relative path to both files!

file1=$(basename $1)
file2=$(basename $2)

if [[ $# -ne 2 ]]; then
    echo "Usage: $0 file1 file2" 2>&1
    exit 1
fi

if [ ! -r "$file1" -o ! -w "$file1" ]; then
    echo "$1 must be both readable and writable. Check file permissions and try again."
    exit 1
fi
if [ ! -r "$file2" -o ! -w "$file2" ]; then
    echo "$2 must be both readable and writable. Check file permissions and try again."
    exit 1
fi

if [[ "$file1" -nt "$file2" ]]; then
    echo "$file1 is the more recent version."
    read -p "Copy the contents of $file1 to $file2? y/n: " copy1
    if [[ "$copy1" = y ]]; then
	copying
	cp $file1 $file2
	echo "Done."
	exit 0
    elif [[ "$copy1" = n ]]; then
	echo "Exiting script..."
	exit 1
    else
	echo "Exiting script..."
	exit 1
    fi

elif [[ "$file1" -ot "$file2" ]]; then
    echo "$file2 is the more recent version."
    read -p "Copy contents of $file2 to $file1? y/n: " copy2
    if [[ "$copy2" = y ]]; then
	copying
	cp $file2 $file1
	echo "Done."
	exit 0
    elif [[ "$copy2" = n ]]; then
	echo "Exiting script..."
	exit 1
    else
	echo "Exiting script..."
	exit 1
    fi
else
    echo "File versions are the same!"
    echo "Exiting script..."
    exit 1
fi

